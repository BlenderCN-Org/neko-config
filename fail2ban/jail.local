
# Nekoconfig default Fail2Ban setup. Use it as you please but make sure to not
# just drag and drop it into your setup. It will not work and probably get
# stuck on some missing logs. Make sure you enable jails that you really need.
# Additionally make sure to install the extra filters by moving them your
# filter.d directory in your Fail2Ban configuration.

#  ad88888ba
# d8"     "8b                ,d
# Y8,                        88
# `Y8aaaaa,     ,adPPYba,  MM88MMM  88       88  8b,dPPYba,
#   `"""""8b,  a8P_____88    88     88       88  88P'    "8a
#         `8b  8PP"""""""    88     88       88  88       d8
# Y8a     a8P  "8b,   ,aa    88,    "8a,   ,a88  88b,   ,a8"
#  "Y88888P"    `"Ybbd8"'    "Y888   `"YbbdP'Y8  88`YbbdP"'
#                                                88
#                                                88

[INCLUDES]
# Change the this according to the name of your distro. Make sure it exists.
before = paths-arch.conf

[DEFAULT]
# The DEFAULT allows a global definition of the options.
# These settings can be overridden in each jail afterwards.

# "ignorself" specifies whether the local resp. own IP addresses should be ignored
# (default is true). Fail2ban will not ban a host which matches such addresses.
ignorself = true

# "ignoreip" can be a list of IP addresses, CIDR masks or DNS hosts. Fail2ban
# will not ban a host which matches an address in this list. Several addresses
# can be defined using space (and/or comma) separator.
ignoreip = 127.0.0.1/8 ::1

# External command that will take a tagged arguments to ignore, e.g. <ip>,
# and return true if the IP is to be ignored. False otherwise.
# ignorecommand = /path/to/command <ip>
ignorecommand =

# "bantime" is the number of seconds that a host is banned.
bantime  = 1d

# Host is banned if it has generated "maxretry" during the last "findtime".
findtime  = 10m

# "maxretry" is the number of failures before a host get banned.
maxretry = 3

# "backend" specifies the backend used to get files modification.
# Available options are "pyinotify", "gamin", "polling", "systemd" and "auto".
# This option can be overridden in each jail as well.
#
# pyinotify: requires pyinotify (a file alteration monitor) to be installed.
#              If pyinotify is not installed, Fail2ban will use auto.
#
# gamin:     requires Gamin (a file alteration monitor) to be installed.
#              If Gamin is not installed, Fail2ban will use auto.
#
# polling:   uses a polling algorithm which does not require external libraries.
#
# systemd:   uses systemd python library to access the systemd journal.
#              Specifying "logpath" is not valid for this backend.
#              See "journalmatch" in the jails associated filter config
#
# auto:      will try to use the following backends, in order:
#              pyinotify, gamin, polling.
#
# Note: if systemd backend is chosen as the default but you enable a jail
#       for which logs are present only in its own log files, specify some other
#       backend for that jail (e.g. polling) and provide empty value for
#       journalmatch. See https://github.com/fail2ban/fail2ban/issues/959#issuecomment-74901200
backend = systemd

# "usedns" specifies if jails should trust hostnames in logs,
# warn when DNS lookups are performed, or ignore all hostnames in logs
#
# yes:   if a hostname is encountered, a DNS lookup will be performed.
# warn:  if a hostname is encountered, a DNS lookup will be performed,
#        but it will be logged as a warning.
# no:    if a hostname is encountered, will not be used for banning,
#        but it will be logged as info.
# raw:   use raw value (no hostname), allow use it for no-host filters/actions (example user)
usedns = warn

# "logencoding" specifies the encoding of the log files handled by the jail
# This is used to decode the lines from the log file.
# Typical examples:  "ascii", "utf-8"
#
# auto: will use the system locale setting
logencoding = auto

# "enabled" enables the jails.
# By default all jails are disabled, and it should stay this way.
# Enable only relevant to your setup jails in your .local or jail.d/*.conf
#
# true:  jail will be enabled and log files will get monitored for changes
# false: jail is not enabled
enabled = false


# "filter" defines the filter to use by the jail.
#  By default jails have names matching their filter name
#
filter = %(__name__)s

#        db
#       d88b                     ,d     88
#      d8'`8b                    88
#     d8'  `8b      ,adPPYba,  MM88MMM  88   ,adPPYba,   8b,dPPYba,   ,adPPYba,
#    d8YaaaaY8b    a8"     ""    88     88  a8"     "8a  88P'   `"8a  I8[    ""
#   d8""""""""8b   8b            88     88  8b       d8  88       88   `"Y8ba,
#  d8'        `8b  "8a,   ,aa    88,    88  "8a,   ,a8"  88       88  aa    ]8I
# d8'          `8b  `"Ybbd8"'    "Y888  88   `"YbbdP"'   88       88  `"YbbdP"'

# Some options used for actions

# Destination email address used solely for the interpolations in
# jail.{conf,local,d/*} configuration files.
destemail = admin@domain.tld

# Sender email address used solely for some actions
sender = fail2ban@hostname.domain.tld

# E-mail action. Since 0.8.1 Fail2Ban uses sendmail MTA for the
# mailing. Change mta configuration parameter to mail if you want to
# revert to conventional 'mail'.
mta = sendmail

# Default protocol
protocol = tcp

# Specify chain where jumps would need to be added in iptables-* actions
chain = INPUT

# Ports to be banned. Usually should be overridden in a particular jail.
# Default is set to the entire range of ports available.
port = 0:65535

# Format of user-agent https://tools.ietf.org/html/rfc7231#section-5.5.3
fail2ban_agent = Fail2Ban/%(fail2ban_version)s

# Action shortcuts. To be used to define action parameter

# Default banning action (e.g. iptables, iptables-new,
# iptables-multiport, shorewall, etc) It is used to define
# action_* variables. Can be overridden globally or per
# section within jail.local file
banaction = iptables-multiport
banaction_allports = iptables-allports

# The simplest action to take: ban only
action_ = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"]

# Ban & send an e-mail with whois report to the destemail.
action_mw = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"]
            %(mta)s-whois[name=%(__name__)s, sender="%(sender)s", dest="%(destemail)s", protocol="%(protocol)s", chain="%(chain)s"]

# Ban & send an e-mail with whois report and relevant log lines to the destemail.
action_mwl = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"]
             %(mta)s-whois-lines[name=%(__name__)s, sender="%(sender)s", dest="%(destemail)s", logpath=%(logpath)s, chain="%(chain)s"]

action_mwm = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"]
             %(mta)s-whois-matches[name=%(__name__)s, dest="%(destemail)s" chain="%(chain)s"]

# See the IMPORTANT note in action.d/xarf-login-attack for when to use this action
# Ban & send a xarf e-mail to abuse contact of IP address and include relevant log lines to the destemail.
action_xarf = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"]
             xarf-login-attack[service=%(__name__)s, sender="%(sender)s", logpath=%(logpath)s, port="%(port)s"]

# Ban IP on CloudFlare & send an e-mail with whois report and relevant log lines to the destemail.
# Make sure you have your CloudFlare credentials setup correctly in actions.d/cloudflare.conf
action_cf_mwl = cloudflare[cfuser="%(cfemail)s", cftoken="%(cfapikey)s"]
                %(mta)s-whois-lines[name=%(__name__)s, sender="%(sender)s", dest="%(destemail)s", logpath=%(logpath)s, chain="%(chain)s"]

# Report block via blocklist.de fail2ban reporting service API
#
# See the IMPORTANT note in action.d/blocklist_de.conf for when to
# use this action. Create a file jail.d/blocklist_de.local containing
# [Init]
# blocklist_de_apikey = {api key from registration]
action_blocklist_de  = blocklist_de[email="%(sender)s", service=%(filter)s, apikey="%(blocklist_de_apikey)s", agent="%(fail2ban_agent)s"]

# Report ban via badips.com, and use as blacklist
#
# See BadIPsAction docstring in config/action.d/badips.py for
# documentation for this action.
#
# NOTE: This action relies on banaction being present on start and therefore
# should be last action defined for a jail.
action_badips = badips.py[category="%(__name__)s", banaction="%(banaction)s", agent="%(fail2ban_agent)s"]

# Report ban via badips.com (uses action.d/badips.conf for reporting only)
action_badips_report = badips[category="%(__name__)s", agent="%(fail2ban_agent)s"]

# Report ban via abuseipdb.com.
#
# See action.d/abuseipdb.conf for usage example and details.
action_abuseipdb = abuseipdb

# Choose default action. To change, just override value of 'action' with the
# interpolation to the chosen action shortcut (e.g.  action_mw, action_mwl, etc)
# in jail.local globally (section [DEFAULT]) or per specific section.
action = %(action_mwm)s


#         88                  88
#         88              88  88
#         88                  88
#         88  ,adPPYYba,  88  88  ,adPPYba,
#         88  ""     `Y8  88  88  I8[    ""
#         88  ,adPPPPP88  88  88   `"Y8ba,
# 88,   ,d88  88,    ,88  88  88  aa    ]8I
#  "Y8888P"   `"8bbdP"Y8  88  88  `"YbbdP"'

# ------------------------------- SSH Servers ------------------------------- #

[sshd]
enabled  = false
port     = ssh
filter   = sshd
action   = iptables
backend  = systemd
maxretry = 5
findtime = 1d
bantime  = 2w

[sshd-ddos]
enabled = false
port    = ssh
filter  = sshd-ddos
logpath = /var/log/auth.log
backend = polling

[dropbear]
enabled = false
port    = ssh
logpath = %(dropbear_log)s
backend = %(dropbear_backend)s

[selinux-ssh]
enabled = false
port    = ssh
logpath = %(auditd_log)s
backend = polling

# ------------------------------- HTTP Servers ------------------------------- #

[apache-auth]
enabled  = false
port     = http,https
logpath  = %(apache_error_log)s
backend  = polling

# Ban hosts which agent identifies spammer robots crawling the web for email addresses.
[apache-badbots]
enabled  = false
port     = http,https
logpath  = %(apache_access_log)s
bantime  = 48h
maxretry = 1
backend  = polling

[apache-noscript]
enabled = false
port    = http,https
logpath = %(apache_error_log)s
backend = polling

[apache-overflows]
enabled  = false
port     = http,https
logpath  = %(apache_error_log)s
maxretry = 2
backend  = polling

[apache-nohome]
enabled  = false
port     = http,https
logpath  = %(apache_error_log)s
maxretry = 2
backend  = polling

[apache-botsearch]
enabled  = false
port     = http,https
logpath  = %(apache_error_log)s
maxretry = 2
backend  = polling

[apache-fakegooglebot]
enabled  = false
port     = http,https
logpath  = %(apache_access_log)s
maxretry = 1
backend  = polling
ignorecommand = %(ignorecommands_dir)s/apache-fakegooglebot <ip>

[apache-modsecurity]
enabled  = false
port     = http,https
logpath  = %(apache_error_log)s
maxretry = 2
backend  = polling

[apache-shellshock]
enabled  = false
port     = http,https
logpath  = %(apache_error_log)s
maxretry = 1
backend  = polling

[openhab-auth]
enabled = false
filter  = openhab
action  = iptables-allports[name=NoAuthFailures]
logpath = /opt/openhab/logs/request.log
backend = polling

[nginx-http-auth]
enabled = false
port    = http,https
logpath = %(nginx_error_log)s
backend = polling

# Ban connections that return a lot of 404 errors and are appearing to find
# scripts to exploit that do not exist. It's not recommended to run this if
# you have something like PHP running. This is best for static sites.
[nginx-noscript]
enabled  = false
port     = http,https
filter   = nginx-noscript
logpath  = /var/log/nginx/access.log
maxretry = 6
backend  = polling

# Ban hosts which agent identifies spammer robots crawling the web for email addresses.
[nginx-badbots]
enabled  = false
port     = http,https
filter   = nginx-badbots
logpath  = %(nginx_access_log)s
maxretry = 2
backend  = polling

[nginx-nohome]
enabled  = false
port     = http,https
filter   = nginx-nohome
logpath  = %(nginx_access_log)s
maxretry = 2
backend  = polling

[nginx-noproxy]
enabled  = false
port     = http,https
filter   = nginx-noproxy
logpath  = %(nginx_access_log)s
maxretry = 2
backend  = polling

# To use 'nginx-limit-req' jail you should have `ngx_http_limit_req_module`
# and define `limit_req` and `limit_req_zone` as described in nginx documentation
# http://nginx.org/en/docs/http/ngx_http_limit_req_module.html
# or for example see in 'config/filter.d/nginx-limit-req.conf'
[nginx-limit-req]
enabled = false
port    = http,https
logpath = %(nginx_error_log)s
backend = polling

[nginx-botsearch]
enabled  = false
port     = http,https
logpath  = %(nginx_error_log)s
maxretry = 2
backend  = polling

# Simple Distributed Denial of Service sudo protection. This is not the ultimate
# solution and you should probably use something else against DDOS attacks.
# This setup though bans connections for 30 seconds giving time between attacks.
#
# If a user falsly crosses the threshold he will only receive light punishment.
# However, using this together with the recidive jail can result in some strong
# bans against clients that cross the threshold multiple times.
#
# NOTE: It is not suggested to have this running all the time. Only when a DDOS
# is actually in progress can it do something. Otherwise you risk your users
# getting booted in a few cases.
[nginx-ddos]
enabled  = false
port     = http,https
filter   = nginx-dos
logpath  = %(nginx_access_log)s
findtime = 300
bantime  = 30
maxretry = 300
backend  = polling

# Single user Denail of Service attack filter. Compared to the DDoS version
# which should only be enabled during an attack, this filter watches for clients
# making large bursts of requests in a very short period of time. Just like
# with the previous filter recidive takes care of the rest if the attack
# doesn't stop after the last ban.
[nginx-dos]
enabled  = false
port     = http,https
filter   = nginx-dos
logpath  = %(nginx_access_log)s
findtime = 10
bantime  = 30
maxretry = 1000
backend = polling

# Ban attackers that try to use PHP's URL-fopen() functionality
# through GET/POST variables. - Experimental, with more than a year
# of usage in production environments.
[php-url-fopen]
enabled = false
port    = http,https
logpath = %(nginx_access_log)s
          %(apache_access_log)s
backend = polling

[suhosin]
enabled = false
port    = http,https
logpath = %(suhosin_log)s
backend = polling

# Same as above for Apache's mod_auth. It catches wrong authentifications.
[lighttpd-auth]
enabled = false
port    = http,https
logpath = %(lighttpd_error_log)s
backend = polling

# ---------------------- Webmail and Groupware Servers ---------------------- #

[roundcube-auth]
enabled = false
port    = http,https
logpath = %(roundcube_errors_log)s
backend = polling
# Use following line in your jail.local if roundcube logs to journal.
# backend = %(syslog_backend)s

[openwebmail]
enabled = false
port    = http,https
logpath = /var/log/openwebmail.log
backend = polling

[horde]
enabled = false
port    = http,https
logpath = /var/log/horde/horde.log
backend = polling

[groupoffice]
enabled = false
port    = http,https
logpath = /home/groupoffice/log/info.log
backend = polling

# Monitor SOGo groupware server. Without proxy this would be: port = 20000
[sogo-auth]
enabled = false
port    = http,https
logpath = /var/log/sogo/sogo.log
backend = polling

[tine20]
enabled = false
logpath = /var/log/tine20/tine20.log
port    = http,https
backend = polling

# ----------------------------- Web applications ----------------------------- #

[drupal-auth]
enabled = false
port    = http,https
logpath = %(syslog_daemon)s
backend = %(syslog_backend)s

[guacamole]
enabled = false
port    = http,https
logpath = /var/log/tomcat*/catalina.out
backend = polling

# Ban clients brute-forcing the monit gui login.
[monit]
enabled = false
port    = 2812
logpath = /var/log/monit
backend = polling

[webmin-auth]
enabled = false
port    = 10000
logpath = %(syslog_authpriv)s
backend = %(syslog_backend)s

[froxlor-auth]
enabled = false
port    = http,https
logpath = %(syslog_authpriv)s
backend = %(syslog_backend)s

# ---------------------------- HTTP Proxy Servers ---------------------------- #

[squid]
enabled = false
port    =  80,443,3128,8080
logpath = /var/log/squid/access.log
backend = polling

[3proxy]
enabled = false
port    = 3128
logpath = /var/log/3proxy.log
backend = polling

# ---------------------------- FTP Servers ---------------------------- #

[proftpd]
enabled = false
port    = ftp,ftp-data,ftps,ftps-data
logpath = %(proftpd_log)s
backend = %(proftpd_backend)s

[pure-ftpd]
enabled = false
port    = ftp,ftp-data,ftps,ftps-data
logpath = %(pureftpd_log)s
backend = %(pureftpd_backend)s

[gssftpd]
enabled = false
port    = ftp,ftp-data,ftps,ftps-data
logpath = %(syslog_daemon)s
backend = %(syslog_backend)s

[wuftpd]
enabled = false
port    = ftp,ftp-data,ftps,ftps-data
logpath = %(wuftpd_log)s
backend = %(wuftpd_backend)s

[vsftpd]
enabled = false
port    = ftp,ftp-data,ftps,ftps-data
logpath = %(vsftpd_log)s
# Set logpath = %(syslog_authpriv)s if you want to rely on PAM failed login
# attempts as vsftpd's failregex should match both of those formats

# ------------------------------- Mail Servers ------------------------------- #

[assp]
enabled = false
port    = smtp,465,submission
logpath = /root/path/to/assp/logs/maillog.txt
backend = polling

[courier-smtp]
enabled = false
port    = smtp,465,submission
logpath = %(syslog_mail)s
backend = %(syslog_backend)s

[postfix]
enabled = false
mode    = more
filter  = postfix[mode=%(mode)s]
port    = smtp,465,submission
logpath = %(postfix_log)s
backend = %(postfix_backend)s

[postfix-rbl]
enabled  = false
filter   = postfix[mode=rbl]
port     = smtp,465,submission
logpath  = %(postfix_log)s
backend  = %(postfix_backend)s
maxretry = 1

[sendmail-auth]
enabled = false
port    = submission,465,smtp
logpath = %(syslog_mail)s
backend = %(syslog_backend)s

[sendmail-reject]
# To use more aggressive modes set filter parameter "mode" to normal (default),
# extra or aggressive. See "tests/files/logs/sendmail-reject" or
# "filter.d/sendmail-reject.conf" for usage example and details.
enabled = false
mode    = normal
filter  = sendmail-reject[mode=%(mode)s]
port    = smtp,465,submission
logpath = %(syslog_mail)s
backend = %(syslog_backend)s

[qmail-rbl]
enabled = false
filter  = qmail
port    = smtp,465,submission
logpath = /service/qmail/log/main/current

# dovecot defaults to logging to the mail syslog facility
# but can be set by syslog_facility in the dovecot configuration.
[dovecot]
enabled = false
port    = pop3,pop3s,imap,imaps,submission,465,sieve
logpath = %(dovecot_log)s
backend = %(dovecot_backend)s

[dovecot-pop3imap]
enabled = false
port    = pop3,pop3s,imap,imaps
filter  = dovecot-pop3imap
logpath = %(dovecot_log)s
backend = %(dovecot_backend)s

[sieve]
enabled = false
port    = smtp,465,submission
logpath = %(dovecot_log)s
backend = %(dovecot_backend)s

[solid-pop3d]
enabled = false
port    = pop3,pop3s
logpath = %(solidpop3d_log)s

[exim]
enabled = false
port    = smtp,465,submission
logpath = %(exim_main_log)s

[exim-spam]
enabled = false
port    = smtp,465,submission
logpath = %(exim_main_log)s

[kerio]
enabled = false
port    = imap,smtp,imaps,465
logpath = /opt/kerio/mailserver/store/logs/security.log

# ------------------------ Mail Server Authenticators ------------------------ #
# Might be used for SMTP, FTP, IMAP servers, so all relevant ports get banned

[courier-auth]
enabled = false
port    = smtp,465,submission,imap3,imaps,pop3,pop3s
logpath = %(syslog_mail)s
backend = %(syslog_backend)s

[postfix-sasl]
enabled = false
filter  = postfix[mode=auth]
port    = smtp,465,submission,imap3,imaps,pop3,pop3s
# Consider monitoring /var/log/mail.warn if you are running postfix a it would
# provide the same log lines at the "warn" level but overall at smaller filesizes.
logpath = %(postfix_log)s
backend = %(postfix_backend)s

[perdition]
enabled = false
port    = imap3,imaps,pop3,pop3s
logpath = %(syslog_mail)s
backend = %(syslog_backend)s

[squirrelmail]
enabled = false
port    = smtp,465,submission,imap2,imap3,imaps,pop3,pop3s,http,https,socks
logpath = /var/lib/squirrelmail/prefs/squirrelmail_access_log
backend = polling

[cyrus-imap]
enabled = false
port    = imap3,imaps
logpath = %(syslog_mail)s
backend = %(syslog_backend)s

[uwimap-auth]
enabled = false
port    = imap3,imaps
logpath = %(syslog_mail)s
backend = %(syslog_backend)s

# ------------------------------- DNS Servers ------------------------------- #

# !!! WARNING !!!
#   Since UDP is a connection-less protocol, spoofing of IP and imitation
#   of illegal actions is way too simple.  Thus enabling of this filter
#   might provide an easy way for implementing a DoS against a chosen
#   victim. See
#    http://nion.modprobe.de/blog/archives/690-fail2ban-+-dns-fail.html
#   Please DO NOT USE this jail unless you know what you are doing.
#
# IMPORTANT: see filter.d/named-refused for instructions to enable logging
# This jail blocks UDP traffic for DNS requests.
# [named-refused-udp]
#
# filter   = named-refused
# port     = domain,953
# protocol = udp
# logpath  = /var/log/named/security.log

# IMPORTANT: see filter.d/named-refused for instructions to enable logging
# This jail blocks TCP traffic for DNS requests.

[named-refused]
enabled = false
port    = domain,953
logpath = /var/log/named/security.log
backend = polling

[nsd]
enabled = false
port    = 53
action  = %(banaction)s[name=%(__name__)s-tcp, port="%(port)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
          %(banaction)s[name=%(__name__)s-udp, port="%(port)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]
logpath = /var/log/nsd.log
backend = polling

# ------------------------------ Miscellaneous ------------------------------ #

[asterisk]
enabled  = false
port     = 5060,5061
action   = %(banaction)s[name=%(__name__)s-tcp, port="%(port)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(port)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]
           %(mta)s-whois[name=%(__name__)s, dest="%(destemail)s"]
logpath  = /var/log/asterisk/messages
maxretry = 10
backend  = polling

[freeswitch]
enabled  = false
port     = 5060,5061
action   = %(banaction)s[name=%(__name__)s-tcp, port="%(port)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(port)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]
           %(mta)s-whois[name=%(__name__)s, dest="%(destemail)s"]
logpath  = /var/log/freeswitch.log
maxretry = 10
backend  = polling

# To log wrong MySQL access attempts add to /etc/my.cnf in [mysqld] or
# equivalent section:
# log-warning = 2
#
# for syslog (daemon facility)
# [mysqld_safe]
# syslog
#
# for own logfile
# [mysqld]
# log-error=/var/log/mysqld.log
[mysqld-auth]
enabled = false
port     = 3306
logpath  = %(mysql_log)s
backend  = %(mysql_backend)s

# Log wrong MongoDB auth (for details see filter 'filter.d/mongodb-auth.conf')
[mongodb-auth]
enabled = false
# Change port when running with "--shardsvr" or "--configsvr" runtime operation
port     = 27017
logpath  = /var/log/mongodb/mongodb.log
backend  = polling

# Jail for more extended banning of persistent abusers
# !!! WARNINGS !!!
# 1. Make sure that your loglevel specified in fail2ban.conf/.local
#    is not at DEBUG level -- which might then cause fail2ban to fall into
#    an infinite loop constantly feeding itself with non-informative lines
# 2. Increase dbpurgeage defined in fail2ban.conf to e.g. 648000 (7.5 days)
#    to maintain entries for failed logins for sufficient amount of time
[recidive]
enabled   = false
logpath   = /var/log/fail2ban.log
banaction = %(banaction_allports)s
bantime   = 1w
findtime  = 1d
backend   = polling

# Generic filter for PAM. Has to be used with action which bans all
# ports such as iptables-allports, shorewall
# pam-generic filter can be customized to monitor specific subset of 'tty's
[pam-generic]
enabled   = false
banaction = %(banaction_allports)s
logpath   = %(syslog_authpriv)s
backend   = %(syslog_backend)s

[xinetd-fail]
enabled   = false
banaction = iptables-multiport-log
logpath   = %(syslog_daemon)s
backend   = %(syslog_backend)s
maxretry  = 2

# stunnel - You need to set a port for this
[stunnel]
enabled = false
logpath = /var/log/stunnel4/stunnel.log
# port =

[ejabberd-auth]
enabled = false
port    = 5222
logpath = /var/log/ejabberd/ejabberd.log
backend = polling

# Firewall: http://www.cstrike-planet.com/faq/6
[counter-strike]
enabled = false
logpath = /opt/cstrike/logs/L[0-9]*.log
tcpport = 27030,27031,27032,27033,27034,27035,27036,27037,27038,27039
udpport = 1200,27000,27001,27002,27003,27004,27005,27006,27007,27008,27009,27010,27011,27012,27013,27014,27015
action  = %(banaction)s[name=%(__name__)s-tcp, port="%(tcpport)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
          %(banaction)s[name=%(__name__)s-udp, port="%(udpport)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]
backend = polling

# Consider a low maxretry and a long bantime.
# Nobody except your own Nagios server should ever probe nrpe.
# For logpath, nrpe.cfg may define a different log_facility.
[nagios]
enabled  = false
logpath  = %(syslog_daemon)s
backend  = %(syslog_backend)s
maxretry = 1

# See "oracleims" filter file for configuration requirement for Oracle IMS v6 and above
[oracleims]
enabled   = false
logpath   = /opt/sun/comms/messaging64/log/mail.log_current
banaction = %(banaction_allports)s
backend   = polling

[directadmin]
enabled = false
logpath = /var/log/directadmin/login.log
port    = 2222
backend = polling

[portsentry]
enabled  = false
logpath  = /var/lib/portsentry/portsentry.history
maxretry = 1
backend  = polling

# This pass2allow example allows FTP traffic after successful HTTP authentication
# knocking_url variable must be overridden to some secret value in jail.local.
# Don't forget to set logpath to the access log of the website with HTTP auth.
[pass2allow-ftp]
enabled      = false
port         = ftp,ftp-data,ftps,ftps-data
knocking_url = /knocking/
filter       = apache-pass[knocking_url="%(knocking_url)s"]
logpath      = %(apache_access_log)s
blocktype    = RETURN
returntype   = DROP
bantime      = 1h
maxretry     = 1
findtime     = 1
backend      = polling

# Teamspeak server query. You might have to change the log location.
[teamspeak]
enabled  = false
port     = 2008,2010,9987,10011,30033,41144
filter   = teamspeak
logpath  = /var/log/teamspeak3-server/ts3server_*.log
maxretry = 3
bantime  = 86400
findtime = 7800
action   = iptables-multiport[name="teamspeak", port="2008,2010,9987,10011,30033,41144"]
backend  = polling

# AKA mumble-server
[murmur]
enabled = false
port    = 64738
action  = %(banaction)s[name=%(__name__)s-tcp, port="%(port)s", protocol=tcp, chain="%(chain)s", actname=%(banaction)s-tcp]
          %(banaction)s[name=%(__name__)s-udp, port="%(port)s", protocol=udp, chain="%(chain)s", actname=%(banaction)s-udp]
logpath = /var/log/mumble-server/mumble-server.log
backend = polling

# For Mac OS Screen Sharing Service (VNC)
[screensharingd]
enabled     = false
logpath     = /var/log/system.log
logencoding = utf-8
backend     = polling

# HAProxy by default doesn't log to file. You'll need to set it up to forward logs
# to a syslog server which would then write them to disk. See"haproxy-http-auth"
# filter for a brief cautionary note when setting maxretry and findtime.
[haproxy-http-auth]
enabled = false
logpath = /var/log/haproxy.log
backend = polling

[slapd]
enabled = false
port    = ldap,ldaps
filter  = slapd
logpath = /var/log/slapd.log
backend = polling

[domino-smtp]
enabled = false
port    = smtp,ssmtp
filter  = domino-smtp
logpath = /home/domino01/data/IBM_TECHNICAL_SUPPORT/console.log
backend = polling
